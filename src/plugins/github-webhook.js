import GitService from "../services/git-service.js";

async function githubWebhookPlugin(fastify, options) {
  const webhookSecret = process.env.GITHUB_WEBHOOK_SECRET;
  const gitService = new GitService();

  if (!webhookSecret) {
    console.log(
      "GITHUB_WEBHOOK_SECRET not set. Webhook signature validation will be skipped."
    );
  }

  if (!process.env.GITHUB_TOKEN) {
    console.log("GITHUB_TOKEN not set. PR creation workflow will be disabled.");
  }

  // Function to fetch PR file changes from GitHub API
  const fetchPRFileChanges = async (prUrl) => {
    try {
      // Convert PR URL to API URL for files
      // From: https://github.com/owner/repo/pull/123
      // To: https://api.github.com/repos/owner/repo/pulls/123/files
      const apiUrl =
        prUrl
          .replace("github.com", "api.github.com/repos")
          .replace("/pull/", "/pulls/") + "/files";

      console.log("Fetching file changes from:", apiUrl);

      const response = await fetch(apiUrl);
      if (!response.ok) {
        throw new Error(
          `GitHub API error: ${response.status} ${response.statusText}`
        );
      }

      const files = await response.json();
      console.log(`Found ${files.length} changed files`);

      return files.map((file) => ({
        filename: file.filename,
        status: file.status, // added, modified, deleted, renamed
        additions: file.additions,
        deletions: file.deletions,
        changes: file.changes,
        patch: file.patch, // The actual diff
        blob_url: file.blob_url,
        raw_url: file.raw_url,
      }));
    } catch (error) {
      console.error("Error fetching PR file changes:", error.message);
      return [];
    }
  };

  // GitHub webhook endpoint
  fastify.post("/", async (request, reply) => {
    const { body } = request;
    const eventType = request.headers["x-github-event"];

    console.log("GitHub webhook received!");
    console.log("Event type:", eventType);

    // Handle PR creation event
    if (eventType === "pull_request" && body.action === "opened") {
      const pr = body.pull_request;
      const repo = body.repository;
      const sender = body.sender;

      // Prevent infinite loops: Skip if this is an auto-generated PR
      const isAutoGeneratedPR = pr.head.ref.startsWith("auto-analysis-pr-") // Branch name pattern

      if (isAutoGeneratedPR) {
        console.log(
          "Skipping auto-generated PR to prevent infinite loop:",
          {
            prNumber: pr.number,
            title: pr.title,
            branch: pr.head.ref,
            isDraft: pr.draft,
            author: sender.login,
            detectionReasons: {
              branchPattern: pr.head.ref.startsWith("auto-analysis-pr-")
            },
          }
        );
        return {
          success: true,
          message: "Auto-generated PR skipped to prevent loop",
          skipped: true,
          pr: {
            number: pr.number,
            title: pr.title,
            branch: pr.head.ref,
          },
        };
      }

      console.log("Processing legitimate PR (not auto-generated):");
      console.log("=== PULL REQUEST CREATED ===");
      console.log("PR Number:", pr.number);
      console.log("PR Title:", pr.title);
      console.log("Branch:", pr.head.ref, "â†’", pr.base.ref);

      // Fetch file changes
      console.log("Fetching file changes...");
      const fileChanges = await fetchPRFileChanges(pr.html_url);

      console.log("=== FILE CHANGES ===");
      fileChanges.forEach((file, index) => {
        console.log(`${index + 1}. ${file.filename}`);
        console.log(`   Status: ${file.status}`);
        console.log(`   Changes: +${file.additions} -${file.deletions}`);
        console.log(`   Raw URL: ${file.raw_url}`);
        console.log("---");
      });
      console.log("=== END FILE CHANGES ===");

      // Prepare PR data for the Git service
      const prData = {
        number: pr.number,
        title: pr.title,
        url: pr.html_url,
        author: sender.login,
        repository: repo.full_name,
        createdAt: pr.created_at,
        baseBranch: pr.base.ref,
        headBranch: pr.head.ref,
      };

      // Trigger PR analysis workflow if GitHub token is available
      let analysisResult = null;
      if (process.env.GITHUB_TOKEN && fileChanges.length > 0) {
        try {
          console.log("Starting automated PR analysis workflow...");
          analysisResult = await gitService.processPRAndCreateAnalysis(
            prData,
            fileChanges
          );
          console.log("PR analysis workflow completed successfully!");
        } catch (error) {
          console.error("PR analysis workflow failed:", error.message);
        }
      }

      return {
        success: true,
        message: "Pull request details captured with file changes",
        pr: {
          ...prData,
          fileChanges: fileChanges,
        },
        analysis: analysisResult
          ? {
              success: true,
              newPR: analysisResult.newPR,
              createdFiles: analysisResult.createdFiles,
              directories: analysisResult.directories,
            }
          : null,
      };
    }

    // Handle other PR events
    if (eventType === "pull_request") {
      console.log("Pull Request Event:", {
        action: body.action,
        prNumber: body.pull_request?.number,
        repository: body.repository?.full_name,
      });
    }

    return {
      success: true,
      message: "Webhook processed successfully",
    };
  });
}

export default githubWebhookPlugin;
